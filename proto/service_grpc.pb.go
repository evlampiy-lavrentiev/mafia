// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MafiaClient is the client API for Mafia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaClient interface {
	Connect(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ClientId, error)
	Disconnect(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*EmptyMsg, error)
	SubscribeToNotifications(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (Mafia_SubscribeToNotificationsClient, error)
	ShowPlayersList(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*PlayersList, error)
	Vote(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*EmptyMsg, error)
	EndDay(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*EmptyMsg, error)
	Expose(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*EmptyMsg, error)
	Chat(ctx context.Context, in *ChatMsg, opts ...grpc.CallOption) (*EmptyMsg, error)
}

type mafiaClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaClient(cc grpc.ClientConnInterface) MafiaClient {
	return &mafiaClient{cc}
}

func (c *mafiaClient) Connect(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ClientId, error) {
	out := new(ClientId)
	err := c.cc.Invoke(ctx, "/Mafia.Mafia/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) Disconnect(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*EmptyMsg, error) {
	out := new(EmptyMsg)
	err := c.cc.Invoke(ctx, "/Mafia.Mafia/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) SubscribeToNotifications(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (Mafia_SubscribeToNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mafia_ServiceDesc.Streams[0], "/Mafia.Mafia/SubscribeToNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaSubscribeToNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mafia_SubscribeToNotificationsClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type mafiaSubscribeToNotificationsClient struct {
	grpc.ClientStream
}

func (x *mafiaSubscribeToNotificationsClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mafiaClient) ShowPlayersList(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*PlayersList, error) {
	out := new(PlayersList)
	err := c.cc.Invoke(ctx, "/Mafia.Mafia/ShowPlayersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) Vote(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*EmptyMsg, error) {
	out := new(EmptyMsg)
	err := c.cc.Invoke(ctx, "/Mafia.Mafia/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) EndDay(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*EmptyMsg, error) {
	out := new(EmptyMsg)
	err := c.cc.Invoke(ctx, "/Mafia.Mafia/EndDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) Expose(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*EmptyMsg, error) {
	out := new(EmptyMsg)
	err := c.cc.Invoke(ctx, "/Mafia.Mafia/Expose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) Chat(ctx context.Context, in *ChatMsg, opts ...grpc.CallOption) (*EmptyMsg, error) {
	out := new(EmptyMsg)
	err := c.cc.Invoke(ctx, "/Mafia.Mafia/Chat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MafiaServer is the server API for Mafia service.
// All implementations must embed UnimplementedMafiaServer
// for forward compatibility
type MafiaServer interface {
	Connect(context.Context, *ClientInfo) (*ClientId, error)
	Disconnect(context.Context, *ClientId) (*EmptyMsg, error)
	SubscribeToNotifications(*ClientId, Mafia_SubscribeToNotificationsServer) error
	ShowPlayersList(context.Context, *EmptyMsg) (*PlayersList, error)
	Vote(context.Context, *ClientReq) (*EmptyMsg, error)
	EndDay(context.Context, *ClientId) (*EmptyMsg, error)
	Expose(context.Context, *ClientId) (*EmptyMsg, error)
	Chat(context.Context, *ChatMsg) (*EmptyMsg, error)
	mustEmbedUnimplementedMafiaServer()
}

// UnimplementedMafiaServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaServer struct {
}

func (UnimplementedMafiaServer) Connect(context.Context, *ClientInfo) (*ClientId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedMafiaServer) Disconnect(context.Context, *ClientId) (*EmptyMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedMafiaServer) SubscribeToNotifications(*ClientId, Mafia_SubscribeToNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToNotifications not implemented")
}
func (UnimplementedMafiaServer) ShowPlayersList(context.Context, *EmptyMsg) (*PlayersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPlayersList not implemented")
}
func (UnimplementedMafiaServer) Vote(context.Context, *ClientReq) (*EmptyMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedMafiaServer) EndDay(context.Context, *ClientId) (*EmptyMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndDay not implemented")
}
func (UnimplementedMafiaServer) Expose(context.Context, *ClientId) (*EmptyMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expose not implemented")
}
func (UnimplementedMafiaServer) Chat(context.Context, *ChatMsg) (*EmptyMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedMafiaServer) mustEmbedUnimplementedMafiaServer() {}

// UnsafeMafiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaServer will
// result in compilation errors.
type UnsafeMafiaServer interface {
	mustEmbedUnimplementedMafiaServer()
}

func RegisterMafiaServer(s grpc.ServiceRegistrar, srv MafiaServer) {
	s.RegisterService(&Mafia_ServiceDesc, srv)
}

func _Mafia_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mafia.Mafia/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).Connect(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mafia.Mafia/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).Disconnect(ctx, req.(*ClientId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_SubscribeToNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MafiaServer).SubscribeToNotifications(m, &mafiaSubscribeToNotificationsServer{stream})
}

type Mafia_SubscribeToNotificationsServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type mafiaSubscribeToNotificationsServer struct {
	grpc.ServerStream
}

func (x *mafiaSubscribeToNotificationsServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _Mafia_ShowPlayersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).ShowPlayersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mafia.Mafia/ShowPlayersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).ShowPlayersList(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mafia.Mafia/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).Vote(ctx, req.(*ClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_EndDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).EndDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mafia.Mafia/EndDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).EndDay(ctx, req.(*ClientId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_Expose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).Expose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mafia.Mafia/Expose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).Expose(ctx, req.(*ClientId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mafia.Mafia/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).Chat(ctx, req.(*ChatMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Mafia_ServiceDesc is the grpc.ServiceDesc for Mafia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mafia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Mafia.Mafia",
	HandlerType: (*MafiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Mafia_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Mafia_Disconnect_Handler,
		},
		{
			MethodName: "ShowPlayersList",
			Handler:    _Mafia_ShowPlayersList_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Mafia_Vote_Handler,
		},
		{
			MethodName: "EndDay",
			Handler:    _Mafia_EndDay_Handler,
		},
		{
			MethodName: "Expose",
			Handler:    _Mafia_Expose_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _Mafia_Chat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToNotifications",
			Handler:       _Mafia_SubscribeToNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
